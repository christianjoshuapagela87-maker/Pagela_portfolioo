/* script.js — robust version for static + server deployments */
document.addEventListener('DOMContentLoaded', () => {
  // --- Smooth scroll for nav links ---
  document.querySelectorAll('.nav-links a[href^="#"]').forEach(link => {
    link.addEventListener('click', e => {
      const href = link.getAttribute('href');
      if (!href || href === '#') return;
      e.preventDefault();
      const target = document.querySelector(href);
      if (target) {
        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });

  // --- Contact form handler (works with PHP endpoint OR third-party services) ---
  const form = document.querySelector('#contact-form');
  const responseDiv = document.querySelector('#form-response') || createResponseDiv();

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      responseDiv.style.display = 'none';
      const submitBtn = form.querySelector('button[type="submit"]') || null;
      if (submitBtn) { submitBtn.disabled = true; submitBtn.dataset.old = submitBtn.textContent; submitBtn.textContent = 'Sending…'; }

      const formData = new FormData(form);
      const action = form.getAttribute('action') || ''; // e.g. "php/send_mail.php" or Formspree endpoint

      try {
        // If action looks like a php file on static site, warn user
        if (action && action.endsWith('.php') && location.hostname.includes('github.io')) {
          throw new Error('This site is hosted on GitHub Pages (static). PHP endpoints will not work here. Use Formspree or host PHP elsewhere.');
        }

        // Default: POST to action using fetch
        const res = await fetch(action || window.location.href, {
          method: 'POST',
          body: formData,
          headers: { 'Accept': 'application/json' } // some services respond JSON
        });

        // Try to parse JSON safely
        let data = null;
        try { data = await res.json(); } catch (err) { /* non-json response */ }

        // Logic for success/failure:
        if (res.ok && (data === null || data.success || data.status === 'success' || (data && data.message))) {
          // If service returns message, show it, otherwise generic success
          showResponse(data && data.message ? data.message : 'Message sent successfully!', false);
          form.reset();
        } else {
          // Non-2xx or indicates failure
          const msg = data && (data.message || data.error) ? (data.message || data.error) : `Failed to send (status ${res.status})`;
          throw new Error(msg);
        }
      } catch (err) {
        console.error('Contact form error:', err);
        showResponse(err.message || 'Failed to send message. See console for details.', true);
      } finally {
        if (submitBtn) { submitBtn.disabled = false; submitBtn.textContent = submitBtn.dataset.old || 'Send message'; }
      }
    });
  } // end if form

  // --- Skills interactive tags (defensive) ---
  const skillTags = document.querySelectorAll('.skill-tags span[data-skill]');
  const skillName = document.getElementById('skill-name');
  const skillPercent = document.getElementById('skill-percent');
  const progressFill = document.getElementById('progress-fill');

  if (skillTags.length && skillName && skillPercent && progressFill) {
    skillTags.forEach(tag => {
      tag.addEventListener('click', () => {
        skillTags.forEach(t => t.classList.remove('active'));
        tag.classList.add('active');
        const name = tag.dataset.skill || tag.textContent.trim();
        const level = Number(tag.dataset.level || 0);
        skillName.textContent = name;
        skillPercent.textContent = `${level}%`;
        // animate
        progressFill.style.width = '0%';
        // small delay to allow CSS transition
        setTimeout(() => { progressFill.style.width = `${level}%`; }, 80);
      });
    });
  }

  // --- helpers ---
  function showResponse(message, isError = false) {
    responseDiv.style.display = 'block';
    responseDiv.textContent = message;
    responseDiv.style.color = isError ? '#b91c1c' : '#064e3b';
    // scroll to top so user sees it (but you said you want to stay at top — this scroll is small)
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  function createResponseDiv() {
    const d = document.createElement('div');
    d.id = 'form-response';
    d.style.display = 'none';
    d.style.textAlign = 'center';
    d.style.marginTop = '12px';
    const formParent = form ? form.parentNode : document.body;
    formParent.appendChild(d);
    return d;
  }
});
